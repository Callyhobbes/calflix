{"version":3,"sources":["axios.js","request.js","Banner.js","Row.js","assets/calflix_logo.png","assets/calvin_icon.jpg","Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","get","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","string","n","useState","movie","setMovie","useEffect","a","request","BannerList","data","results","Math","floor","random","length","fetchData","className","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","overview","substr","Row","fetchURL","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","map","onClick","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","alt","id","videoId","opts","height","width","playerVars","autoplay","Navbar","show","handleShow","window","addEventListener","scrollY","removeEventListener","logo","avatar","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9503edb.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n// base url to make requests to the movie db\r\nconst instance = axios.create({\r\n  baseURL: 'https://api.themoviedb.org/3',\r\n});\r\n\r\ninstance.get()\r\n\r\nexport default instance;","const API_KEY = '27e7527232fb21c9f64b28fea9cfe7fc';\r\n\r\nconst requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`\r\n}\r\n\r\nexport default requests;","import React, { useState, useEffect } from 'react';\r\nimport axios from './axios.js';\r\nimport request from './request.js';\r\nimport './Banner.css';\r\n\r\nconst base_URL = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Banner() {\r\n  const [movie, setMovie] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const requests = await axios.get(request.fetchNetflixOriginals);\r\n      let BannerList = requests.data.results;\r\n      setMovie(\r\n        BannerList[Math.floor(Math.random() * (BannerList.length - 1))]\r\n      );\r\n      return requests;\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  function truncate(string, n) {\r\n    return string?.length > n ? string.substr(0, n - 1) + \"...\" : string;\r\n  }\r\n  \r\n  return (\r\n    <header \r\n      className=\"banner\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundImage: `url(${base_URL}${movie?.backdrop_path})`,\r\n        backgroundPosition: \"center center\"\r\n      }}\r\n    >\r\n      {/* {background image} */}\r\n      <div className=\"banner-content\">\r\n      {/* {title} */}\r\n        <h2 className=\"banner-title\">{movie.title || movie.name}</h2>\r\n      {/* {div > 2 buttons} */}\r\n        <div className=\"banner-buttons\">\r\n          <button className=\"banner-button\">Play</button>\r\n          <button className=\"banner-button\">My List</button>\r\n        </div>\r\n      {/* {description} */}\r\n        <h3 className=\"banner-description\">{truncate(movie?.overview, 150)}</h3>\r\n      </div>\r\n      <div className=\"banner-fadeout\"></div>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from './axios.js';\r\nimport './Row.css';\r\nimport Youtube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\n// poster base URL\r\nconst base_URL = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchURL, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n  // A snippet of code which runs based on a specific condition/variable\r\n  useEffect(() => {\r\n    // if [], run once when the row loads and don't run again\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchURL);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    };\r\n    fetchData();\r\n  }, [fetchURL]);\r\n\r\n  const opts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      // https://developers.google.com/youtube/player_parameters\r\n      autoplay: 1,\r\n    }\r\n  };\r\n\r\n  const handleClick = (movie) => {\r\n    if (trailerUrl) {\r\n      setTrailerUrl('');\r\n      // movieTrailer(movie.name || movie.title || \"\")\r\n      //   .then(url => {\r\n      //     const urlParams = new URLSearchParams(new URL(url).search);\r\n      //     // https://www.youtube.com/watch?v=thisIsTheEndPoint so get the 'v'\r\n      //     setTrailerUrl(urlParams.get('v'));\r\n      //   })\r\n      //   .catch((error) => {\r\n      //     console.log(error)\r\n      //     console.log(movie.name || movie.title);\r\n      //   })\r\n    } else {\r\n      movieTrailer(movie.name || movie.title || \"\")\r\n        .then(url => {\r\n          const urlParams = new URLSearchParams(new URL(url).search);\r\n          // https://www.youtube.com/watch?v=thisIsTheEndPoint so get the 'v'\r\n          setTrailerUrl(urlParams.get('v'));\r\n        })\r\n        .catch((error) => {\r\n          console.log(error)\r\n          console.log(movie.name || movie.title);\r\n        })\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      {/*Title*/}\r\n      <h2>{title}</h2>\r\n\r\n      <div className=\"row-posters\">\r\n        {/* Row posters */}\r\n        {movies.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            className={`row-poster ${isLargeRow && \"row-poster-large\"}`}\r\n            onClick={() => handleClick(movie)}\r\n            src={`${base_URL}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} \r\n            alt={`${movie.title || movie.name} poster`}>\r\n          </img>\r\n        ))}\r\n      </div>\r\n      {trailerUrl && <Youtube videoId={trailerUrl} opts={opts}/>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Row\r\n","export default __webpack_public_path__ + \"static/media/calflix_logo.33751707.png\";","export default __webpack_public_path__ + \"static/media/calvin_icon.fe61c786.jpg\";","import React, { useState, useEffect } from 'react';\r\nimport logo from './assets/calflix_logo.png';\r\nimport avatar from './assets/calvin_icon.jpg';\r\nimport './Navbar.css';\r\n\r\nfunction Navbar() {\r\n  const [show, handleShow] = useState(false);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', () => {\r\n      if(window.scrollY > 100) {\r\n        handleShow(true);\r\n      } else {\r\n        handleShow(false);\r\n      };\r\n    });\r\n    return () => {\r\n      window.removeEventListener('scroll');\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`nav ${show && \"nav-black\"}`}>\r\n      <img className=\"calflix-logo\" src={logo} alt=\"Calflix Logo\"></img>\r\n      <img className=\"calvin-icon\" src={avatar} alt=\"User Icon\"/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\nimport './App.css';\nimport Banner from './Banner.js';\nimport Row from './Row.js';\nimport Navbar from './Navbar'\nimport request from './request.js';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Navbar />\n      <Banner />\n      <Row \n        title=\"Netflix Originals\" \n        fetchURL={request.fetchNetflixOriginals}\n        isLargeRow={true}\n      />\n      <Row title=\"Trending Now\" fetchURL={request.fetchTrending} />\n      <Row title=\"Top Rated\" fetchURL={request.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchURL={request.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchURL={request.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchURL={request.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchURL={request.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchURL={request.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}